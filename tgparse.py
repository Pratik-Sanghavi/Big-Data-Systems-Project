import argparse, re
from SQLDataModel import SQLDataModel

def parse_log_line(log_idx:int, log_line:str, interval:int=1000) -> dict:
    """Parses logfile generated by `sudo tegrastats` using specified interval and returns as dict mapping metric to value, specifically expanding target metrics when sensible."""
    metrics = {
        'RAM (MB)': r'RAM (\d+)/(\d+)MB',
        'SWAP (MB)': r'SWAP (\d+)/(\d+)MB',
        'CPU': r'CPU \[(.*?)\]',
        'EMC_FREQ (MHz)': r'EMC_FREQ (\d+)%@\d+',
        'GR3D_FREQ (MHz)': r'GR3D_FREQ (\d+)%@\d+',
        'APE (MHz)': r'APE (\d+)',
        'MTS': r'MTS fg (\d+)% bg (\d+)%',
        'PLL (C)': r'PLL@([\d\.]+)C',
        'MCPU (C)': r'MCPU@([\d\.]+)C',
        'PMIC (C)': r'PMIC@([\d\.]+)C',
        'Tboard (C)': r'Tboard@([\d\.]+)C',
        'GPU (C)': r'GPU@([\d\.]+)C',
        'BCPU (C)': r'BCPU@([\d\.]+)C',
        'thermal (C)': r'thermal@([\d\.]+)C',
        'Tdiode (C)': r'Tdiode@([\d\.]+)C',
        'VDD_SYS_GPU': r'VDD_SYS_GPU (\d+)/(\d+)',
        'VDD_SYS_SOC': r'VDD_SYS_SOC (\d+)/(\d+)',
        'VDD_4V0_WIFI': r'VDD_4V0_WIFI (\d+)/(\d+)',
        'VDD_IN': r'VDD_IN (\d+)/(\d+)',
        'VDD_SYS_CPU': r'VDD_SYS_CPU (\d+)/(\d+)',
        'VDD_SYS_DDR': r'VDD_SYS_DDR (\d+)/(\d+)',
    }
    parsed_log = {}
    parsed_log['Time (ms)'] = interval * (log_idx + 1)
    for metric, pattern in metrics.items():
        match = re.search(pattern, log_line)
        if match:
            parsed_log[metric] = match.group(1) if len(match.groups()) == 1 else match.groups()
        if metric in ('RAM (MB)','SWAP (MB)'):
            if isinstance(parsed_log[metric],tuple) and len(parsed_log[metric]) == 2:
                used, total = parsed_log[metric]  
                parsed_log[f"Used {metric}"] = used
                parsed_log[f"Total {metric}"] = total            
        elif metric in ('VDD_SYS_GPU','VDD_SYS_SOC','VDD_4V0_WIFI','VDD_IN','VDD_SYS_CPU','VDD_SYS_DDR'):
            if isinstance(parsed_log[metric],tuple) and len(parsed_log[metric]) == 2:
                curr_metric, avg_metric = parsed_log[metric]
                parsed_log[f"Current {metric}"] = curr_metric
                parsed_log[f"Average {metric}"] = avg_metric
        elif metric == 'CPU':
            cpu_loads = parsed_log[metric].split(',')
            for cpu_id, cpu_usage in enumerate(cpu_loads):
                parsed_log[f"CPU {cpu_id}"] = cpu_usage.split('@')[0]
        elif metric == 'MTS':
            fg, bg = parsed_log[metric]
            parsed_log[metric] = f"fg {fg}% bg {bg}%"
        if isinstance(parsed_log[metric], tuple):
            try:
                parsed_log[metric] = '/'.join(parsed_log[metric])
            except KeyError:
                # Key already deleted
                pass 
    del_targets = [k for k in parsed_log.keys() if k in ('CPU','VDD_SYS_GPU','VDD_SYS_SOC','VDD_4V0_WIFI','VDD_IN','VDD_SYS_CPU','VDD_SYS_DDR','RAM (MB)','SWAP (MB)')]
    for del_target in del_targets:
        del parsed_log[del_target]
    return parsed_log

def parse_tegrastats_logfile(log_file:str, output_file:str=None, interval:int=1000, quiet_result:bool=False) -> SQLDataModel:
    """Parses specified tegrastats `log_file` and returns data after prepending cumulative time (ms) for each row parsed and saves to `output_file` if specified."""
    with open(log_file, 'r') as log:
        log_lines = log.readlines()
    log_lines = [line.strip('\n') for line in log_lines if line.startswith('RAM')]
    if len(log_lines) < 1:
        raise ValueError(f"No tegrastats output found in file '{log_file}', you guys did something wrong")
    parsed_logs = [parse_log_line(idx, line, interval=interval) for idx, line in enumerate(log_lines)]
    sdm = SQLDataModel(parsed_logs, max_column_width=22, display_index=False, display_color='#a6d7e8')
    if not quiet_result:
        sdm.set_table_style('polars')
        print(sdm)
    if output_file is not None:
        sdm.to_csv(output_file, quotechar='"')
    return sdm

def main() -> None:
    """Tegrastats parser for log output and extracting relevant metrics.

    Usage:
        python tgparse.py [-h] [-o OUTPUT_FILE] [-i INTERVAL] [-q QUIET] log_file

    Returns:
        None, saves output to specified CSV file.
    """
    parser = argparse.ArgumentParser(description='Parse tegrastats log file for relevant metrics and print output optionally saving results as CSV file.')
    parser.add_argument('log_file', type=str, help='Path to the tegrastats log file which should be original txt file generated by sudo tegrastats command.')
    parser.add_argument('-o', '--output_file', type=str, default=None, help='Path to save output as CSV file. Default is None.')
    parser.add_argument('-i', '--interval', type=int, default=1000, help='Interval of log data in milliseconds. Default is 1000.')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet output and suppress printing to terminal. Default is False')

    args = parser.parse_args()
    parse_tegrastats_logfile(args.log_file, output_file=args.output_file, interval=args.interval, quiet_result=args.quiet)

if __name__ == '__main__':
    main()
